#include<iostream>
#include<queue>
using namespace std;
int matrix[1290][130][61];
int inq[1290][130][61]={false};
int n,m,l,t;
int X[6]={0,0,1,-1,0,0};
int Y[6]={1,-1,0,0,0,0};
int Z[6]={0,0,0,0,1,-1};
bool test(int x,int y,int z)
{
	if(x<0||x>n||y<0||y>m||z<0||z>l) return false;
	if(matrix[x][y][z]==0) return false;
	if(inq[x][y][z]==true) return false;
	return true;
}
struct Node
{
	int x,y,z;
}node;
int BFS(int x,int y,int z)
{
	queue<Node> Q;
	int tot=0;
	node.x=x;node.y=y;node.z=z;
	Q.push(node);
	inq[x][y][z]=true;
	while(!Q.empty())
	{
		Node top=Q.front();
		Q.pop();
		tot++;
		for(int i=0;i<6;++i)
		{
			int newX=top.x+X[i];
			int newY=top.y+Y[i];
			int newZ=top.z+Z[i];
			if(test(newX,newY,newZ))
			{
				node.x=newX;node.y=newY;node.z=newZ;
				Q.push(node);
				inq[newX][newY][newZ]=true;
			}
		}
	}
	if(tot>=t) return tot;
	else return 0; 
}
int main()
{
	int ans=0;
	scanf("%d%d%d%d",&n,&m,&l,&t);
	for(int z=0;z<l;++z)
	{
		for(int x=0;x<n;++x)
		{
			for(int y=0;y<m;++y)
			{
				scanf("%d",&matrix[x][y][z]);
			}
		} 
	}
	for(int z=0;z<l;++z)
	{
		for(int x=0;x<n;++x)
		{
			for(int y=0;y<m;++y)
			{
				if(matrix[x][y][z]==1&&inq[x][y][z]==false)
				{
					ans+=BFS(x,y,z);
				}
			}
		}
	}
	printf("%d",ans);
	return 0;
}
