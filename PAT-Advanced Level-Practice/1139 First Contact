#include<iostream>
#include<string>
#include<unordered_map>
#include<vector>
#include<algorithm>
using namespace std;
unordered_map<int, bool> m;
vector<int> v[10000];
int N, M, K, c, d;
string a, b;
struct node
{
	int c, d;
};
vector<node> ans;
bool cmp(node a, node b)
{
	if (a.c != b.c) return a.c < b.c;
	else return a.d < b.d;
}
int main()
{
	scanf("%d%d", &N, &M);
	for (int i = 0; i < M; ++i)
	{
		cin >> a >> b;
		if (a.length() == b.length())
		{
			v[abs(stoi(a))].push_back(abs(stoi(b)));
			v[abs(stoi(b))].push_back(abs(stoi(a)));
		}
		m[abs(stoi(a)) * 10000 + abs(stoi(b))] = m[abs(stoi(b)) * 10000 + abs(stoi(a))] = true;
	}
	scanf("%d", &K);
	for (int i = 0; i < K; ++i)
	{
		cin >> c >> d;
		ans.clear();
		for (int j = 0; j < v[abs(c)].size(); ++j)
		{
			for (int k = 0; k < v[abs(d)].size(); ++k)
			{
				if (v[abs(c)][j] == abs(d) || v[abs(d)][k] == abs(c)) continue;
				if (m[v[abs(c)][j] * 10000 + v[abs(d)][k]] == true)
				{
					ans.push_back({ v[abs(c)][j],v[abs(d)][k] });
				}
			}
		}
		sort(ans.begin(), ans.end(), cmp);
		printf("%d\n", ans.size());
		for (int j = 0; j < ans.size(); ++j)
		{
			printf("%04d %04d\n", ans[j].c, ans[j].d);
		}
	}
}
