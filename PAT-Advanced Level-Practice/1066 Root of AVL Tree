#include<cstdio>
#include<algorithm>
using namespace std;
struct Node
{
	int data,height;
	Node* lchild;
	Node* rchild;
};
Node* newNode(int data)
{
	Node* node=new Node;
	node->data=data;
	node->height=1;
	node->lchild=node->rchild=NULL;
	return node;
}
int getHeight(Node* root)
{
	if(root==NULL) return 0;
	else return root->height;
}
void updateHeight(Node* root)
{
	root->height=max(getHeight(root->lchild),getHeight(root->rchild))+1;
}
int getBlanceFactor(Node* root)
{
	return getHeight(root->lchild)-getHeight(root->rchild);
}
void L(Node* &root)
{
	Node* temp=root->rchild;
	root->rchild=temp->lchild;
	temp->lchild=root;
	updateHeight(root);
	updateHeight(temp);
	root=temp;
}
void R(Node* &root)
{
	Node* temp=root->lchild;
	root->lchild=temp->rchild;
	temp->rchild=root;
	updateHeight(root);
	updateHeight(temp);
	root=temp;
}
void insert(Node* &root,int data)
{
	if(root==NULL)
	{
		root=newNode(data);
		return;
	}
	if(data<root->data)
	{
		insert(root->lchild,data);
		updateHeight(root);
		if(getBlanceFactor(root)==2)
		{
			if(getBlanceFactor(root->lchild)==1)
			{
				R(root);
			}
			else if(getBlanceFactor(root->lchild)==-1)
			{
				L(root->lchild);
				R(root);
			}
		}
	}
	else
	{
		insert(root->rchild,data);
		updateHeight(root);
		if(getBlanceFactor(root)==-2)
		{
			if(getBlanceFactor(root->rchild)==-1)
			{
				L(root);
			}
			else if(getBlanceFactor(root->rchild)==1)
			{
				R(root->rchild);
				L(root);
			}
		}
	}
}
int main()
{
	int N,t;
	Node* root=NULL;
	scanf("%d",&N);
	for(int i=0;i<N;++i)
	{
		scanf("%d",&t);
		insert(root,t);
	}
	printf("%d",root->data);
	return 0;
}
