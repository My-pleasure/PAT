#include<cstdio>
#include<algorithm>
using namespace std;
const int maxn=101;
int heap[maxn],origin[maxn],jud[maxn],ins[maxn],n;
void downAjust(int low,int high)
{
	int i=low,j=2*i;
	while(j<=high)
	{
		if(j+1<=high&&heap[j+1]>heap[j])
		{
			j=j+1;
		}
		if(heap[j]>heap[i])
		{
			swap(heap[i],heap[j]);
			i=j;
			j=2*i;
		}
		else break;
	}
}
void createHeap()
{
	for(int i=n/2;i>=1;--i)
	{
		downAjust(i,n);
	}
}
int Judge(int a[],int b[])
{
	for(int i=1;i<=n;++i)
	{
		if(a[i]!=b[i]) return 0;
	}
	return 1;
}
int sortHeap()
{
	createHeap();
	for(int i=n;i>1;--i)
	{
		swap(heap[1],heap[i]);
		downAjust(1,i-1);
		if(Judge(heap,jud))
		{
			printf("Heap Sort\n");
			swap(heap[1],heap[i-1]);
			downAjust(1,i-2);
			for(int j=1;j<=n;++j)
			{
				if(j==1) printf("%d",heap[j]);
				else printf(" %d",heap[j]);
			}
			return 1;
		}
	}
	return 0;
}
int insertion()
{
	for(int i=2;i<=n;++i)
	{
		sort(origin,origin+i+1);
		if(Judge(origin,jud))
		{
			sort(origin,origin+i+2);
			printf("Insertion Sort\n");
			for(int j=1;j<=n;++j)
			{
				if(j==1) printf("%d",origin[j]);
				else printf(" %d",origin[j]);
			}
			return 1;	
		}
	}
	return 0;
}
int main()
{
	scanf("%d",&n);
	for(int i=1;i<=n;++i)
	{
		scanf("%d",&origin[i]);
		heap[i]=origin[i];
	}
	for(int i=1;i<=n;++i)
	{
		scanf("%d",&jud[i]);
	}
	if(!insertion()) sortHeap();
}
