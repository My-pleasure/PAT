#include<iostream>
using namespace std;
int N, K, flag, a[100], cnt;
struct node
{
	int data;
	node* lchild;
	node* rchild;
};
void inserts(node* &root, int x)
{
	if (root == NULL)
	{
		root = new node;
		root->data = x;
		root->lchild = root->rchild = NULL;
		return;
	}
	if (abs(x) <= abs(root->data))
	{
		inserts(root->lchild, x);
	}
	else
	{
		inserts(root->rchild, x);
	}
}
void DFS(node* root,int numb)
{
	if (root==NULL)
	{
		a[cnt++] = numb;
		return;
	}
	if (root->data < 0)
	{
		if (root->lchild != NULL)
		{
			if (root->lchild->data < 0) flag = 1;
		}
		if (root->rchild != NULL)
		{
			if (root->rchild->data < 0)flag = 1;
		}
	}
	if (root->data > 0) DFS(root->lchild, numb + 1);
	else DFS(root->lchild, numb);
	if (root->data > 0) DFS(root->rchild, numb + 1);
	else DFS(root->rchild, numb);
}
int main()
{
	int temp;
	scanf("%d", &K);
	for (int i = 0; i < K; ++i)
	{
		node* root = new node;
		root = NULL;
		scanf("%d", &N);
		for (int j = 0; j < N; ++j)
		{
			scanf("%d", &temp);
			inserts(root, temp);
		}
		flag = 0; cnt = 0;
		if (root->data > 0) DFS(root, 0);
		else flag = 1;
		for (int j = 1; j < cnt; ++j)
		{
			if (a[0] != a[j]) flag = 1;
		}
		if (flag == 0) printf("Yes\n");
		else printf("No\n");
	}
}
