#include<iostream>
#include<vector>
using namespace std;
const int INF = 1000000000;
const int maxn = 505;
int n, m, start, ed, lenminti = INF, minsize = INF;
int GL[maxn][maxn], GT[maxn][maxn], d[maxn], t[maxn];
bool vis[maxn] = { false };
vector<int> pre[maxn], tempPath, path, pret[maxn], patht;
void dijkstra_d(int s)
{
	fill(d, d + maxn, INF);
	d[s] = 0;
	for (int i = 0; i < n; ++i)
	{
		int u = -1, MIN = INF;
		for (int j = 0; j < n; ++j)
		{
			if (vis[j] == false && d[j] < MIN)
			{
				u = j;
				MIN = d[j];
			}
		}
		if (u == -1) return;
		vis[u] = true;
		for (int v = 0; v < n; ++v)
		{
			if (vis[v] == false && GL[u][v] != INF)
			{
				if (d[v] > d[u] + GL[u][v])
				{
					d[v] = d[u] + GL[u][v];
					pre[v].clear();
					pre[v].push_back(u);
				}
				else if (d[v] == d[u] + GL[u][v])
				{
					pre[v].push_back(u);
				}
			}
		}
	}
}
void dijkstra_t(int s)
{
	fill(t, t + maxn, INF);
	fill(vis, vis + maxn, false);
	t[s] = 0;
	for (int i = 0; i < n; ++i)
	{
		int u = -1, MIN = INF;
		for (int j = 0; j < n; ++j)
		{
			if (vis[j] == false && t[j] < MIN)
			{
				u = j;
				MIN = t[j];
			}
		}
		if (u == -1) return;
		vis[u] = true;
		for (int v = 0; v < n; ++v)
		{
			if (vis[v] == false && GT[u][v] != INF)
			{
				if (t[v] > t[u] + GT[u][v])
				{
					t[v] = t[u] + GT[u][v];
					pret[v].clear();
					pret[v].push_back(u);
				}
				else if (t[v] == t[u] + GT[u][v])
				{
					pret[v].push_back(u);
				}
			}
		}
	}
}
void DFS_d(int v)
{
	if (v == start)
	{
		tempPath.push_back(v);
		int time = 0;
		for (int i = tempPath.size() - 1; i > 0; --i)
		{
			int id = tempPath[i], idnext = tempPath[i - 1];
			time += GT[id][idnext];
		}
		if (lenminti > time)
		{
			lenminti = time;
			path = tempPath;
		}
		tempPath.pop_back();
	}
	tempPath.push_back(v);
	for (int i = 0; i < pre[v].size(); ++i)
	{
		DFS_d(pre[v][i]);
	}
	tempPath.pop_back();
}
void DFS_t(int v)
{
	if (v == start)
	{
		tempPath.push_back(v);
		int size = tempPath.size();
		if (minsize>size)
		{
			minsize=size;
			patht = tempPath;
		}
		tempPath.pop_back();
	}
	tempPath.push_back(v);
	for (int i = 0; i < pret[v].size(); ++i)
	{
		DFS_t(pret[v][i]);
	}
	tempPath.pop_back();
}
int main()
{
	int v1, v2, onew, len, ti;
	scanf("%d%d", &n, &m);
	fill(GL[0], GL[0] + maxn*maxn, INF);
	fill(GT[0], GT[0] + maxn*maxn, INF);
	for (int i = 0; i < m; ++i)
	{
		scanf("%d%d%d%d%d", &v1, &v2, &onew, &len, &ti);
		if (onew == 0)
		{
			GL[v1][v2] = GL[v2][v1] = len;
			GT[v1][v2] = GT[v2][v1] = ti;
		}
		else
		{
			GL[v1][v2] = len;
			GT[v1][v2] = ti;
		}
	}
	scanf("%d%d", &start, &ed);
	dijkstra_d(start);
	DFS_d(ed);
	tempPath.clear();
	dijkstra_t(start);
	DFS_t(ed);
	if (path == patht)
	{
		printf("Distance = %d; Time = %d: ", d[ed], t[ed]);
		for (int i = path.size()-1; i >= 0; --i)
		{
			printf("%d", path[i]);
			if (i > 0) printf(" -> ");
		}
	}
	else
	{
		printf("Distance = %d: ", d[ed]);
		for (int i = path.size() - 1; i >= 0; --i)
		{
			printf("%d", path[i]);
			if (i > 0) printf(" -> ");
		}
		printf("\nTime = %d: ", t[ed]);
		for (int i = patht.size() - 1; i >= 0; --i)
		{
			printf("%d", patht[i]);
			if (i > 0) printf(" -> ");
		}
	}
}
