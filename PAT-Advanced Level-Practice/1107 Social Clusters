#include<cstdio>
#include<algorithm>
using namespace std;
const int maxn=1001;
int n,course[maxn];
int Father[maxn],isRoot[maxn];
void init(int n)
{
	for(int i=1;i<=n;++i)
	{
		Father[i]=i;
		course[i]=0;
	}
}
int FindFather(int x)
{
	int a=x;
	while(x!=Father[x])
	{
		x=Father[x];
	}
	while(a!=Father[a])
	{
		int z=a;
		a=Father[a];
		Father[z]=x;
	}
	return x;
}
void Union(int a,int b)
{
	int faA=FindFather(a);
	int faB=FindFather(b);
	if(faA!=faB) Father[faA]=faB;
}
bool cmp(int a,int b)
{
	return a>b;
}
int main()
{
	int k,t;
	scanf("%d",&n);
	init(n);
	for(int i=1;i<=n;++i)
	{
		scanf("%d:",&k);
		for(int j=1;j<=k;++j)
		{
			scanf("%d",&t);
			if(course[t]==0) course[t]=i;
			else Union(i,FindFather(course[t]));
		}
	}
	for(int i=1;i<=n;++i)
	{
		++isRoot[FindFather(i)];
	}
	int ans=0;
	for(int i=1;i<=n;++i)
	{
		if(isRoot[i]!=0) ++ans;
	}
	printf("%d\n",ans);
	sort(isRoot+1,isRoot+n+1,cmp);
	for(int i=1;i<=ans;++i)
	{
		if(i==1) printf("%d",isRoot[i]);
		else printf(" %d",isRoot[i]);
	}
	return 0;
}
