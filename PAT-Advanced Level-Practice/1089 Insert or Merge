  #include<iostream>
#include<algorithm>
using namespace std;
const int maxn = 105;
int N, origion[maxn], temp[maxn], check[maxn];
bool isSame(int A[])
{
	for (int i = 1; i <= N; ++i)
	{
		if (A[i] != check[i]) return false;
	}
	return true;
}
bool insertion()
{
	for (int i = 2; i <= N; ++i)
	{
		int pos = temp[i], j = i;
		while (j > 1 && pos < temp[j-1])
		{
			temp[j] = temp[j-1];
			--j;
		}
		temp[j] = pos;
		if (isSame(temp))
		{
			printf("Insertion Sort\n");
			int pos = temp[i + 1], j = i + 1;
			while (j > 1 && pos < temp[j-1])
			{
				temp[j] = temp[j - 1];
				--j;
			}
			temp[j] = pos;
			for (int i = 1; i <= N; ++i)
			{
				if (i != 1) printf(" ");
				printf("%d", temp[i]);
			}
			return true;
		}
	}
	return false;
}
void mergesort()
{
	bool flag = false;
	for (int step = 2; step / 2 <= N; step *= 2)
	{
		if (step != 2 && isSame(temp))
		{
			flag = true;
		}
		for (int i = 1; i <= N; i+=step)
		{
			sort(temp + i, temp + min(i + step, N + 1));
		}
		if (flag)
		{
			printf("Merge Sort\n");
			for (int i = 1; i <= N; ++i)
			{
				if (i != 1) printf(" ");
				printf("%d", temp[i]);
			}
			return;
		}
	}
}
int main()
{
	scanf("%d", &N);
	for (int i = 1; i <= N; ++i)
	{
		scanf("%d", &origion[i]);
	}
	for (int i = 1; i <= N; ++i)
	{
		scanf("%d", &check[i]);
	}
	for (int i = 1; i <= N; ++i)
	{
		temp[i] = origion[i];
	}
	if (!insertion())
	{
		for (int i = 1; i <= N; ++i)
		{
			temp[i] = origion[i];
		}
		mergesort();
	}
}
