#include<iostream>
#include<map>
#include<string>
#include<vector>
#include<algorithm>
using namespace std;
int P, M, N;
struct node
{
	string name;
	int Gp, Gm, Gf, G;
};
bool cmp(node a, node b)
{
	if (a.G != b.G) return a.G > b.G;
	else return a.name < b.name;
}
map<string, int> m;
vector<node> v, ans;
int main()
{
	string id;
	int score, cnt = 1;
	scanf("%d%d%d", &P, &M, &N);
	for (int i = 0; i < P; ++i)
	{
		cin >> id >> score;
		if (score >= 200)
		{
			v.push_back(node{ id,score,-1,-1,0 });
			m[id] = cnt++;
		}
	}
	for (int i = 0; i < M; ++i)
	{
		cin >> id >> score;
		if (m[id] != 0)
		{
			v[m[id] - 1].Gm = score;
		}
	}
	for (int i = 0; i < N; ++i)
	{
		cin >> id >> score;
		if (m[id] != 0)
		{
			v[m[id] - 1].Gf = score;
			if (v[m[id] - 1].Gm > score)
			{
				v[m[id] - 1].G = int(v[m[id] - 1].Gm*0.4 + score*0.6+0.5);
			}
			else v[m[id] - 1].G = score;
		}
	}
	for (int i = 0; i < v.size(); ++i)
	{
		if (v[i].G >= 60) ans.push_back(v[i]);
	}
	sort(ans.begin(), ans.end(), cmp);
	for (int i = 0; i < ans.size(); ++i)
	{
		cout << ans[i].name;
		printf(" %d %d %d %d\n", ans[i].Gp, ans[i].Gm, ans[i].Gf, ans[i].G);
	}
}
