#include<cstdio>
#include<vector>
#include<cstring>
#include<algorithm>
using namespace std;
const int maxn=10001;
int maxdepth=0,n,father[maxn];
vector<int> G[maxn],depRoot,ans;
void init()
{
	for(int i=1;i<=n;++i)
	{
		father[i]=i;
	}
}
int findFather(int x)
{
	if(x==father[x]) return x;
	else return findFather(father[x]);
}
void Union(int a,int b)
{
	int faA=findFather(a);
	int faB=findFather(b);
	if(faA!=faB) father[faA]=faB;
}
void DFS(int u,int depth,int pre)
{
	if(maxdepth<depth)
	{
		depRoot.clear();
		maxdepth=depth;
		depRoot.push_back(u);
	}
	else if(maxdepth==depth)
	{
		depRoot.push_back(u);
	}
	for(int i=0;i<G[u].size();++i)
	{
		if(G[u][i]==pre) continue; 
		DFS(G[u][i],depth+1,u);
	}
}
int main()
{
	int a,b;
	scanf("%d",&n);
	init();
	for(int i=0;i<n-1;++i)
	{
		scanf("%d%d",&a,&b);
		G[a].push_back(b);
		G[b].push_back(a);
		Union(a,b);
	}
	int block=0;
	for(int i=1;i<=n;++i)
	{
		if(i==father[i]) ++block;
	}
	if(block!=1) printf("Error: %d components",block);
	else
	{
		DFS(1,1,-1);
		ans=depRoot;
		DFS(ans[0],1,-1);
		for(int i=0;i<depRoot.size();++i)
		{
			ans.push_back(depRoot[i]);
		}
		sort(ans.begin(),ans.end());
		printf("%d\n",ans[0]); 
		for(int i=1;i<ans.size();++i)
		{
			if(ans[i]!=ans[i-1]) printf("%d\n",ans[i]);
		}
	}
}
