#include<iostream>
#include<string>
#include<map>
using namespace std;
int n,k,numpeo=0;
const int maxn=2000;
bool vis[maxn]={false};
int G[maxn][maxn],weight[maxn];
map<string,int> strToInt;
map<int,string> intToStr;
map<string,int> Gang;
int change(string a)
{
	if(strToInt.find(a)!=strToInt.end())
	{
		return strToInt[a];
	}
	else
	{
		strToInt[a]=numpeo;
		intToStr[numpeo]=a;
		return numpeo++;
	}
}
void DFS(int now,int &head,int &totalvalue,int &numMember)
{
	++numMember;
	vis[now]=true;
	if(weight[now]>weight[head])
	{
		head=now;
	}
	for(int i=0;i<numpeo;++i)
	{
		if(G[now][i]>0)
		{
			totalvalue+=G[now][i];
			G[i][now]=G[now][i]=0;
			if(vis[i]==false)
			{
				DFS(i,head,totalvalue,numMember);
			}
		}
	}
}
void DFSTrave()
{
	for(int i=0;i<numpeo;++i)
	{
		if(vis[i]==false)
		{
			int head=i,totalvalue=0,numMember=0;
			DFS(i,head,totalvalue,numMember);
			if(numMember>2&&totalvalue>k)
			{
				Gang[intToStr[head]]=numMember;
			}
		}
	}
}
int main()
{
	string a,b;
	int t;
	cin>>n>>k;
	for(int i=0;i<n;++i)
	{
		cin>>a>>b>>t;
		int id1=change(a);
		int id2=change(b);
		weight[id1]+=t;
		weight[id2]+=t;
		G[id1][id2]+=t;
		G[id2][id1]+=t;
	}
	DFSTrave();
	cout<<Gang.size()<<endl;
	for(map<string,int>::iterator it=Gang.begin();it!=Gang.end();++it)
	{
		cout<<it->first<<" "<<it->second<<endl;
	}
	return 0;
}
