#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
const int maxn=100;
struct Node
{
	int x,y;
}node;
int n,m;
int matrix[maxn][maxn];
bool inq[maxn][maxn]={false};
int X[4]={0,1,0,-1};
int Y[4]={1,0,-1,0};
bool judge(int x,int y)
{
	if(x<0||x>maxn||y<0||y>maxn) return false;
	if(matrix[x][y]==0||inq[x][y]==true) return false;
	return true;
}
void BFS(int x,int y)
{
	queue<Node> Q;
	node.x=x;node.y=y;
	Q.push(node);
	inq[x][y]=true;
	while(!Q.empty())
	{
		Node top=Q.front();
		Q.pop();
		for(int i=0;i<4;++i)
		{
			int newX=top.x+X[i];
			int newY=top.y+Y[i];
			if(judge(newX,newY))
			{
				node.x=newX;
				node.y=newY;
				Q.push(node);
				inq[newX][newY]=true;
			}
		}
	}
}
int main()
{
	scanf("%d%d",&n,&m);
	for(int i=0;i<n;++i)
	{
		for(int j=0;j<m;++j)
		{
			scanf("%d",&matrix[i][j]);
		}
	}
	int ans;
	for(int x=0;x<n;++x)
	{
		for(int y=0;y<m;++y)
		{
			if(matrix[x][y]==1&&inq[x][y]==false)
			{
				++ans;
				BFS(x,y);
			}
		}
	}
	printf("%d",ans);
	return 0;
}
