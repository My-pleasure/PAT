#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
const int maxn=100;
struct Node
{
	int x,y;
	int step;
}node,S,T;
int n,m;
char maze[maxn][maxn];
bool inq[maxn][maxn];
int X[4]={0,0,1,-1};
int Y[4]={1,-1,0,0};
bool test(int x,int y)
{
	if(x<0||x>maxn||y<0||y>maxn) return false;
	if(maze[x][y]=='*') return false;
	if(inq[x][y]==true) return false;
	return true;
}
int BFS()
{
	queue<Node> Q;
	Q.push(S);
	while(!Q.empty())
	{
		Node top=Q.front();
		Q.pop();
		if(top.x==T.x&&top.y==T.y) return top.step;
		for(int i=0;i<4;++i)
		{
			int newX=top.x+X[i];
			int newY=top.y+Y[i];
			if(test(newX,newY))
			{
				node.x=newX;node.y=newY;
				node.step=top.step+1;
				Q.push(node);
				inq[newX][newY]=true;
			}
		}
	}
	return -1;
}
int main()
{
	scanf("%d%d",&n,&m);
	for(int i=0;i<n;++i)
	{
		getchar();
		for(int j=0;j<m;++j)
		{
			maze[i][j]=getchar();
		}
		maze[i][m+1]='\0';
	}
	scanf("%d%d%d%d",&S.x,&S.y,&T.x,&T.y);
	S.step=0;
	printf("%d",BFS());
	return 0; 
}
