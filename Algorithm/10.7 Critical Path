#include<iostream>
#include<stack>
#include<vector>
#include<queue>
using namespace std;
const int maxn = 100;
int n, inDegree[maxn], ve[maxn], vl[maxn];
struct node
{
	int v, w;
};
vector<node> G[maxn];
stack<int> topOrder;
bool topologicalSort()
{
	queue<int> q;
	for (int i = 0; i < n; ++i)
	{
		if (inDegree[i] == 0) q.push(i);
	}
	while (!q.empty())
	{
		int u = q.front();
		q.pop();
		topOrder.push(u);
		for (int i = 0; i < G[u].size(); ++i)
		{
			int v = G[u][i].v;
			--inDegree[v];
			if (inDegree[v] == 0)
			{
				q.push(v);
			}
			if (ve[v] < ve[u] + G[u][i].w)
			{
				ve[v] = ve[u] + G[u][i].w;
			}
		}
	}
	if (topOrder.size() == n) return true;
	else return false;
}
int CriticalPath()
{
	fill(ve, ve + maxn, 0);
	if (!topologicalSort()) return -1;
/*	int maxLength = 0;
	for (int i = 0; i < n; ++i)
	{
		if (ve[i] > maxLength) maxLength = ve[i];
	}
	fill(vl, vl + maxn, maxLength);*/
	fill(vl, vl + maxn, ve[n - 1]);
	while (!topOrder.empty())
	{
		int u = topOrder.top();
		topOrder.pop();
		for (int i = 0; i < G[u].size(); ++i)
		{
			int v = G[u][i].v;
			if (vl[u] > vl[v] - G[u][i].w)
			{
				vl[u] = vl[v] - G[u][i].w;
			}
		}
	}
	for (int u = 0; u < n; ++u)
	{
		for (int i = 0; i < G[u].size(); ++i)
		{
			int v = G[u][i].v, w = G[u][i].w;
			int e = ve[u], l = vl[v] - w;
			if (e == l) printf("%d->%d", u, v);
		}
	}
	return ve[n - 1];
}
int main()
{

}
