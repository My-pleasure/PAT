#include<cstdio>
#include<algorithm>
#include<vector>
#include<queue>
using namespace std;
const int maxn=1000;
int G[maxn][maxn],n;
int INF=1000000;
bool vis[maxn]={false};
//DFS邻接矩阵 
void DFS(int u,int depth)
{
	vis[u]=true;
	for(int v=0;v<n;++v)
	{
		if(vis[v]==false&&G[u][v]!=INF)
		{
			vis[v]=true;
			DFS(v,depth+1);
		}
	}
}
void DFSTrave()
{
	for(int u=0;u<n;++u)
	{
		if(vis[u]==false)
		{
			DFS(u,1);
		}
	}
}
//DFS邻接表
vector<int> Adj[maxn];
void DFS(int u,int depth)
{
	vis[u]=true;
	for(int i=0;i<Adj[u].size();++i)
	{
		int v=Adj[u][i];
		if(vis[v]==false)
		{
			DFS(v,depth+1);
		}
	}
}
void DFSTrave()
{
	for(int u=0;u<n;++u)
	{
		if(vis[u]==false)
		{
			DFS(u,1);
		}
	}
}
//BFS邻接矩阵
bool inq[maxn]={false};
void BFS(int u)
{
	queue<int> q;
	q.push(u);
	inq[u]=true;
	while(!q.empty())
	{
		int u=q.front();
		q.pop();
		for(int v=0;v<n;++v)
		{
			if(inq[v]==false&&G[u][v]!=INF)
			{
				q.push(v);
				inq[v]=true;
			}
		}
	}
}
void BFSTrave()
{
	for(int u=0;u<n;++u)
	{
		if(inq[u]==false)
		{
			BFS(u);
		}
	}
}
//BFS邻接表
void BFS(int u)
{
	queue<int> q;
	q.push(u);
	inq[u]=true;
	while(!q.empty())
	{
		int u=q.front();
		q.pop();
		for(int i=0;i<Adj[u].size();++i)
		{
			int v=Adj[u][i];
			if(inq[v]==false)
			{
				inq[v]=true;
				q.push(v);
			}
		}
	}
}
void BFSTrave()
{
	for(int u=0;u<n;++u)
	{
		if(inq[u]==false)
		{
			BFS(u);
		}
	}
}
int main()
{

}
