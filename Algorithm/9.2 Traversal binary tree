#include<iostream>
#include<queue>
using namespace std;
struct node
{
	int data;
	node *lchild;
	node *rchild;
};
//创建新结点 
node* newNode(int v)
{
	node *Node=new node;
	Node->data=v;
	Node->lchild=Node->rchild=NULL;
	return Node;
}
//先序遍历 
void preorder(node *root)
{
	if(root==NULL) return;
	else
	{
		printf("%d",root->data);
		preorder(root->lchild);
		preorder(root->rchild);
	}
}
//中序遍历 
void inorder(node *root)
{
	if(root==NULL) return;
	else
	{
		inorder(root->lchild);
		printf("%d",root->data);
		inorder(root->rchild);
	}
}
//后序遍历 
void postorder(node *root)
{
	if(root==NULL) return;
	else
	{
		postorder(root->lchild);
		postorder(root->rchild);
		printf("%d",root->data);
	}
}
//层次遍历
void LayerOrder(node *root)
{
	queue<int> Q;
	Q.push(root);
	while(!Q.empty())
	{
		node *now=Q.front();
		Q.pop();
		if(now->lchild!=NULL) Q.push(now->lchild);
		if(now->rchild!=NULL) Q.push(now->rchild);
	}
}
//给定先序和中序，重建二叉树
node *Create(int preL,int preR,int inL,int inR)
{
	if(preL>preR) return NULL;
	node *root=new node;
	root->data=pre[preL];
	int k;
	for(k=inL;k<=inR;++k)
	{
		if(in[k]==pre[preL]) break;
	}
	int numLeft=k-inL;
	root->lchild=Create(preL+1,preL+numLeft,inL,k-1);
	root->rchild=Create(preL+numLeft+1,preR,k+1,inR);
	return root;
} 
int main()
{
	
}
